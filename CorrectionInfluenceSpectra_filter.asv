import mouse.*
excelFile = "X:\RGECO\DataBase_Xiaodan_1.xlsx";
excelRows = [181 183 185 228 232 236 202 195 204 230 234 240];
runs =1:3;
sessionInfo.framerate = 25;
lowFreq = 1;
sessionInfo.fluorEmissionFile = "jrgeco1a_emission.txt";
sessionInfo.FADEmissionFile = "fad_emission.txt";
systemInfo.LEDFiles = [
    "TwoCam_Mightex470_BP_Pol.txt",...
    "TwoCam_Mightex525_BP_Pol.txt",...
    "TwoCam_Mightex525_BP_Pol_500-580.txt", ...
    "TwoCam_TL625_Pol_Longer593.txt"];
muspFcn = @(x,y) (40*(x/500).^-1.16)'*y;
sessionInfo.FADspecies = 1;
sessionInfo.fluorSpecies = 2;
pkgDir = what('bauerParams');
fluorDir = fullfile(pkgDir.path,'probeSpectra');

[op_in_FAD, E_in_FAD] = getHbOpticalProperties_xw(muspFcn,fullfile(pkgDir.path,'ledSpectra',systemInfo.LEDFiles(sessionInfo.FADspecies)));
[op_out_FAD, E_out_FAD] = getHbOpticalProperties_xw(muspFcn,fullfile(fluorDir,sessionInfo.FADEmissionFile));
dpIn_FAD = op_in_FAD.dpf/2;
dpOut_FAD = op_out_FAD.dpf/2;
[op_in, E_in] = getHbOpticalProperties_xw(muspFcn,fullfile(pkgDir.path,'ledSpectra',systemInfo.LEDFiles(sessionInfo.fluorSpecies)));
[op_out, E_out] = getHbOpticalProperties_xw(muspFcn,fullfile(fluorDir,sessionInfo.fluorEmissionFile));
dpIn = op_in.dpf/2;
dpOut = op_out.dpf/2;

sessionInfo.bandtype_ISA = {"ISA",0.009,0.08};
sessionInfo.bandtype_Delta = {"Delta",0.4,4};
refseeds=GetReferenceSeeds;

for excelRow = [181 183 185 228 232 236 202 195 204 230 234 240]
    [~, ~, excelRaw]=xlsread(excelFile,1, ['A',num2str(excelRow),':V',num2str(excelRow)]);
    recDate = excelRaw{1}; recDate = string(recDate);
    mouseName = excelRaw{2}; mouseName = string(mouseName);
    saveDir = excelRaw{4}; saveDir = fullfile(string(saveDir),recDate);
    sessionType = excelRaw{6}; sessionType = sessionType(3:end-2);
    maskDir = strcat('E:\RGECO\Kenny\', recDate, '\');
    if exist(fullfile(maskDir,strcat(recDate,'-',mouseName,'-',sessionType,num2str(1),'-dataFluor.mat')),'file')
        load(fullfile(maskDir,strcat(recDate,'-',mouseName,'-',sessionType,num2str(1),'-dataFluor.mat')),'xform_isbrain');
    else
        maskDir = saveDir;
        maskName = strcat(recDate,'-',mouseName,'-LandmarksAndMask','.mat');
        load(fullfile(maskDir,maskName),'xform_isbrain')
    end
    saveDir_lpf = strcat("E:\RGECO\CorrectionComparisonFiltervsUnfilteredDatahb\",recDate);
    for n = runs
        processedName = strcat(recDate,'-',mouseName,'-',sessionType,num2str(n),'_processed','.mat');
        visName = strcat(recDate,'-',mouseName,'-',sessionType,num2str(n));

        load(fullfile(saveDir,processedName), 'xform_FAD', 'xform_jrgeco1a','xform_datahb')
        xform_FADCorr = mouse.physics.correctHb(xform_FAD,xform_datahb,...
            [E_in_FAD(1) E_out_FAD(1)],[E_in_FAD(2) E_out_FAD(2)],dpIn_FAD,dpOut_FAD);
        xform_jrgeco1aCorr = mouse.physics.correctHb(xform_jrgeco1a,xform_datahb,...
            [E_in(1) E_out(1)],[E_in(2) E_out(2)],dpIn,dpOut);

        %% Correction with low passed datahb
        xform_datahb(isnan(xform_datahb)) = 0;
        xform_datahb_lpf = lowpass(xform_datahb,lowFreq,sessionInfo.framerate);

        % Calcium
        xform_jrgeco1aCorr_lpf = mouse.physics.correctHb(xform_jrgeco1a,xform_datahb_lpf,...
            [E_in(1) E_out(1)],[E_in(2) E_out(2)],dpIn,dpOut);

        xform_FADCorr_lpf = mouse.physics.correctHb(xform_FAD,xform_datahb_lpf,...
            [E_in_FAD(1) E_out_FAD(1)],[E_in_FAD(2) E_out_FAD(2)],dpIn_FAD,dpOut_FAD);

        [hz,powerdata_jrgeco1aCorr_lpf] = QCcheck_CalcPDS(xform_jrgeco1aCorr_lpf/0.01,sessionInfo.framerate,xform_isbrain);
        [~,powerdata_jrgeco1aCorr]      = QCcheck_CalcPDS(xform_jrgeco1aCorr/0.01,    sessionInfo.framerate,xform_isbrain);
        [~,powerdata_jrgeco1a]          = QCcheck_CalcPDS(double(xform_jrgeco1a)/0.01,sessionInfo.framerate,xform_isbrain);

        [~,powerdata_FADCorr_lpf]       = QCcheck_CalcPDS(xform_FADCorr_lpf/0.01,     sessionInfo.framerate,xform_isbrain);
        [~,powerdata_FADCorr]           = QCcheck_CalcPDS(xform_FADCorr/0.01,         sessionInfo.framerate,xform_isbrain);
        [~,powerdata_FAD]               = QCcheck_CalcPDS(xform_FAD/0.01,             sessionInfo.framerate,xform_isbrain);

        [~,powerdata_oxy]               = QCcheck_CalcPDS((xform_datahb(:,:,1,:))*10^6,sessionInfo.framerate,xform_isbrain);
        [~,powerdata_deoxy]             = QCcheck_CalcPDS(xform_datahb(:,:,2,:)*10^6,sessionInfo.framerate,xform_isbrain);

        % power map for correction with filtered datahb ISA
        jrgeco1aCorr_ISA_powerMap_lpf = QCcheck_CalcPowerMap(double(xform_jrgeco1aCorr_lpf)/0.01,sessionInfo.framerate,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}]);
        FADCorr_ISA_powerMap_lpf      = QCcheck_CalcPowerMap(double(xform_FADCorr_lpf)/0.01,     sessionInfo.framerate,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}]);

        QCcheck_powerMapVis(jrgeco1aCorr_ISA_powerMap_lpf,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_RGECOCorrISA_FilteredCorrection'))
        QCcheck_powerMapVis(FADCorr_ISA_powerMap_lpf,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_FADCorrISA_FilteredCorrection'))

        % fc for correction with filtered datahb ISA
        [R_jrgeco1aCorr_ISA_lpf,Rs_jrgeco1aCorr_ISA_lpf] = QCcheck_CalcRRs(refseeds,double(xform_jrgeco1aCorr_lpf)/0.01,sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}],true);
        [R_FADCorr_ISA_lpf,Rs_FADCorr_ISA_lpf]           = QCcheck_CalcRRs(refseeds,double(xform_FADCorr_lpf)/0.01,     sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}],true);

        QCcheck_fcVis(refseeds,R_jrgeco1aCorr_ISA_lpf, Rs_jrgeco1aCorr_ISA_lpf,'jrgeco1aCorr','m','ISA',saveDir_lpf,strcat(visName,'-FilteredCorrection'),false,xform_isbrain)
        QCcheck_fcVis(refseeds,R_FADCorr_ISA_lpf,      Rs_FADCorr_ISA_lpf,     'FADCorr',     'g','ISA',saveDir_lpf,strcat(visName,'-FilteredCorrection'),false,xform_isbrain)

        % powermap for correction with unfiltered datahb ISA
        jrgeco1aCorr_ISA_powerMap = QCcheck_CalcPowerMap(double(xform_jrgeco1aCorr)/0.01,sessionInfo.framerate,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}]);
        FADCorr_ISA_powerMap     = QCcheck_CalcPowerMap(double(xform_FADCorr)/0.01,     sessionInfo.framerate,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}]);

        QCcheck_powerMapVis(jrgeco1aCorr_ISA_powerMap,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_RGECOCorrISA_NoFilteredCorrection'))
        QCcheck_powerMapVis(FADCorr_ISA_powerMap,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_FADCorrISA_NoFilteredCorrection'))

        % fc for correction with unfiltered datahb ISA
        [R_jrgeco1aCorr_ISA,Rs_jrgeco1aCorr_ISA] = QCcheck_CalcRRs(refseeds,double(xform_jrgeco1aCorr)/0.01,sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}],true);
        [R_FADCorr_ISA,Rs_FADCorr_ISA]           = QCcheck_CalcRRs(refseeds,double(xform_FADCorr)/0.01,     sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_ISA{2},sessionInfo.bandtype_ISA{3}],true);

        QCcheck_fcVis(refseeds,R_jrgeco1aCorr_ISA, Rs_jrgeco1aCorr_ISA,'jrgeco1aCorr','m','ISA',saveDir_lpf,strcat(visName,'-NoFilteredCorrection'),false,xform_isbrain)
        QCcheck_fcVis(refseeds,R_FADCorr_ISA,      Rs_FADCorr_ISA,     'FADCorr',     'g','ISA',saveDir_lpf,strcat(visName,'-NoFilteredCorrection'),false,xform_isbrain)

        % power map for correction with filtered datahb Delta
        jrgeco1aCorr_Delta_powerMap_lpf = QCcheck_CalcPowerMap(double(xform_jrgeco1aCorr_lpf)/0.01,sessionInfo.framerate,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}]);
        FADCorr_Delta_powerMap_lpf      = QCcheck_CalcPowerMap(double(xform_FADCorr_lpf)/0.01,     sessionInfo.framerate,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}]);

        QCcheck_powerMapVis(jrgeco1aCorr_Delta_powerMap_lpf,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_RGECOCorrDelta_FilteredCorrection'))
        QCcheck_powerMapVis(FADCorr_Delta_powerMap_lpf,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_FADCorrDelta_FilteredCorrection'))

        % fc for correction with filtered datahb Delta
        [R_jrgeco1aCorr_Delta_lpf,Rs_jrgeco1aCorr_Delta_lpf] = QCcheck_CalcRRs(refseeds,double(xform_jrgeco1aCorr_lpf)/0.01,sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}],true);
        [R_FADCorr_Delta_lpf,Rs_FADCorr_Delta_lpf]           = QCcheck_CalcRRs(refseeds,double(xform_FADCorr_lpf)/0.01,     sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}],true);

        QCcheck_fcVis(refseeds,R_jrgeco1aCorr_Delta_lpf, Rs_jrgeco1aCorr_Delta_lpf,'jrgeco1aCorr','m','Delta',saveDir_lpf,strcat(visName,'-FilteredCorrection'),false,xform_isbrain)
        QCcheck_fcVis(refseeds,R_FADCorr_Delta_lpf,      Rs_FADCorr_Delta_lpf,     'FADCorr',     'g','Delta',saveDir_lpf,strcat(visName,'-FilteredCorrection'),false,xform_isbrain)

        % powermap for correction with unfiltered datahb Delta
        jrgeco1aCorr_Delta_powerMap = QCcheck_CalcPowerMap(double(xform_jrgeco1aCorr)/0.01,sessionInfo.framerate,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}]);
        FADCorr_Delta_powerMap     = QCcheck_CalcPowerMap(double(xform_FADCorr)/0.01,     sessionInfo.framerate,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}]);

        QCcheck_powerMapVis(jrgeco1aCorr_Delta_powerMap,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_RGECOCorrDelta_NoFilteredCorrection'))
        QCcheck_powerMapVis(FADCorr_Delta_powerMap,xform_isbrain,'(\DeltaF/F%)',saveDir_lpf,strcat(visName, '_FADCorrDelta_NoFilteredCorrection'))

        % fc for correction with unfiltered datahb Delta
        [R_jrgeco1aCorr_Delta,Rs_jrgeco1aCorr_Delta] = QCcheck_CalcRRs(refseeds,double(xform_jrgeco1aCorr)/0.01,sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}],true);
        [R_FADCorr_Delta,Rs_FADCorr_Delta]           = QCcheck_CalcRRs(refseeds,double(xform_FADCorr)/0.01,     sessionInfo.framerate,xform_isbrain,[sessionInfo.bandtype_Delta{2},sessionInfo.bandtype_Delta{3}],true);

        QCcheck_fcVis(refseeds,R_jrgeco1aCorr_Delta, Rs_jrgeco1aCorr_Delta,'jrgeco1aCorr','m','Delta',saveDir_lpf,strcat(visName,'-NoFilteredCorrection'),false,xform_isbrain)
        QCcheck_fcVis(refseeds,R_FADCorr_Delta,      Rs_FADCorr_Delta,     'FADCorr',     'g','Delta',saveDir_lpf,strcat(visName,'-NoFilteredCorrection'),false,xform_isbrain)
    end
end
